import asyncio
from contextlib import asynccontextmanager
from typing import Optional

from aiogram import Bot, \
    Dispatcher, \
    F, \
    Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, \
    CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, \
    CallbackQuery, \
    FSInputFile

from config import settings
from db import init_db, \
    SessionLocal
from models import Game, \
    Registration
from states import RegisterFlow, \
    EditNameFlow, \
    EditPlayersFlow, \
    AddGameFlow
from keyboards import (
    games_list_kb,
    reg_manage_kb,
    cancel_kb,
    admin_main_kb,
    admin_games_kb,
    admin_game_actions_kb
)
from utils import parse_datetime_maybe, \
    fmt_dt

from sqlalchemy import select, \
    func
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession


# ----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–∏
# ----------------------------

def is_admin(
        user_id: int
        ) -> bool:
    return user_id in settings.admin_ids


@asynccontextmanager
async def session_scope() -> AsyncSession:
    async with SessionLocal() as s:
        try:
            yield s
            await s.commit()
        except Exception:
            await s.rollback()
            raise


async def list_active_games(
        s: AsyncSession
        ) -> list[Game]:
    res = await s.execute(
        select(Game).where(Game.is_active == True).order_by(Game.when.is_(None), Game.when.asc(), Game.id.desc())
    )
    return list(res.scalars())


async def count_confirmed_teams(
        s: AsyncSession,
        game_id: int
        ) -> int:
    q = select(func.count(Registration.id)).where(
        Registration.game_id == game_id,
        Registration.status == "confirmed"
    )
    return (await s.execute(q)).scalar_one()


async def sum_confirmed_people(
        s: AsyncSession,
        game_id: int,
        exclude_reg_id: int | None = None
        ) -> int:
    conds = [Registration.game_id == game_id, Registration.status == "confirmed"]
    if exclude_reg_id is not None:
        conds.append(Registration.id != exclude_reg_id)
    q = select(func.coalesce(func.sum(Registration.players), 0)).where(*conds)
    return (await s.execute(q)).scalar_one()


def game_brief(
        g: Game,
        confirmed_teams: int,
        confirmed_people: int,
        waitlist_teams: int
        ) -> str:
    teams_cap = f"{g.teams_capacity}" if g.teams_capacity is not None else "‚àû"
    people_cap = f"{g.people_capacity}" if g.people_capacity is not None else "‚àû"
    when = fmt_dt(g.when)
    loc = g.location or "‚Äî"
    return (
        f"<b>{g.title}</b>\n"
        f"üìÖ {when}\n"
        f"üìç {loc}\n"
        f"üë• –ö–æ–º–∞–Ω–¥: {confirmed_teams} / {teams_cap} (WL: {waitlist_teams})\n"
        f"üßë‚Äçü§ù‚Äçüßë –õ—é–¥–µ–π: {confirmed_people} / {people_cap}\n"
    )


async def teams_list_text(
        s: AsyncSession,
        game_id: int,
        limit: int = 30
        ) -> str:
    res = await s.execute(
        select(Registration)
        .where(Registration.game_id == game_id)
        .order_by(Registration.status.asc(), Registration.created_at.asc())
        .limit(limit)
    )
    regs = list(res.scalars())
    if not regs:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    lines = []
    for i, r in enumerate(regs, start=1):
        mark = "‚úÖ" if r.status == "confirmed" else "‚åõ"
        lines.append(f"{i}. {r.team_name} ‚Äî {r.players} —á–µ–ª. {mark}")
    cnt_all = (await s.execute(
        select(func.count(Registration.id)).where(Registration.game_id == game_id)
    )).scalar_one()
    tail = f"\n‚Ä¶ –∏ –µ—â—ë {cnt_all - len(regs)} –∫–æ–º–∞–Ω–¥(—ã)." if cnt_all > len(regs) else ""
    return "\n".join(lines) + tail


# ----------------------------
# –†–æ—É—Ç–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ----------------------------

user_r = Router()


@user_r.message(CommandStart())
async def start(
        m: Message,
        state: FSMContext
        ):
    await state.clear()
    async with session_scope() as s:
        games = await list_active_games(s)
        if not games:
            await m.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏–≥—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ.")
            return
        data = [(g.id, f"{g.title} ({fmt_dt(g.when)})" if g.when else g.title) for g in games]
        await m.answer("–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=games_list_kb(data, page=1))


@user_r.message(Command("whoami"))
async def whoami(
        m: Message
        ):
    await m.answer(f"–¢–≤–æ–π Telegram user_id: <code>{m.from_user.id}</code>", parse_mode=ParseMode.HTML)


@user_r.callback_query(F.data.startswith("page:"))
async def paginate_games(
        cq: CallbackQuery
        ):
    page = int(cq.data.split(":")[1])
    async with session_scope() as s:
        games = await list_active_games(s)
        data = [(g.id, f"{g.title} ({fmt_dt(g.when)})" if g.when else g.title) for g in games]
        await cq.message.edit_reply_markup(reply_markup=games_list_kb(data, page=page))
    await cq.answer()


@user_r.callback_query(F.data == "my_regs")
async def my_regs(
        cq: CallbackQuery
        ):
    uid = cq.from_user.id
    async with session_scope() as s:
        res = await s.execute(
            select(Registration, Game).join(Game, Registration.game_id == Game.id).where(Registration.user_id == uid)
        )
        rows = res.all()
        if not rows:
            await cq.message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.")
            await cq.answer()
            return

        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–∏—è ‚Äî –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ò —Å—Ä–∞–∑—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –Ω–∞ —ç—Ç–æ–π –∏–≥—Ä–µ
        for reg, game in rows:
            confirmed_teams = await count_confirmed_teams(s, game.id)
            confirmed_people = await sum_confirmed_people(s, game.id)
            q_wait = select(func.count(Registration.id)).where(
                Registration.game_id == game.id, Registration.status == "waitlist"
            )
            waitlist_teams = (await s.execute(q_wait)).scalar_one()
            brief = game_brief(game, confirmed_teams, confirmed_people, waitlist_teams)
            teams_text = await teams_list_text(s, game.id, limit=30)

            text = (
                f"{brief}"
                f"<b>–¢–≤–æ—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n"
                f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: <b>{reg.team_name}</b>\n"
                f"‚Ä¢ –ò–≥—Ä–æ–∫–æ–≤: <b>{reg.players}</b>\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: <b>{reg.status}</b>\n\n"
                f"<b>–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:</b>\n{teams_text}"
            )
            await cq.message.answer(text, reply_markup=reg_manage_kb(reg.id), parse_mode=ParseMode.HTML)
    await cq.answer()


@user_r.callback_query(F.data.startswith("game:"))
async def choose_game(
        cq: CallbackQuery,
        state: FSMContext
        ):
    game_id = int(cq.data.split(":")[1])
    async with session_scope() as s:
        game = await s.get(Game, game_id)
        if not game or not game.is_active:
            await cq.answer("–≠—Ç–∞ –∏–≥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
            return
        uid = cq.from_user.id
        existing = await s.execute(
            select(Registration).where(Registration.user_id == uid, Registration.game_id == game_id)
            )
        if existing.scalar_one_or_none():
            await cq.message.answer(
                "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —ç—Ç—É –∏–≥—Ä—É. –û—Ç–∫—Ä–æ–π ¬´–ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏¬ª, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å."
                )
            await cq.answer()
            return

    await state.set_state(RegisterFlow.entering_team_name)
    await state.update_data(game_id=game_id)

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å–≤–æ–¥–∫—É –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    async with session_scope() as s:
        g = await s.get(Game, game_id)
        confirmed_teams = await count_confirmed_teams(s, game_id)
        confirmed_people = await sum_confirmed_people(s, game_id)
        q_wait = select(func.count(Registration.id)).where(
            Registration.game_id == game_id, Registration.status == "waitlist"
            )
        waitlist_teams = (await s.execute(q_wait)).scalar_one()
        brief = game_brief(g, confirmed_teams, confirmed_people, waitlist_teams)
        teams_text = await teams_list_text(s, game_id, limit=30)

    await cq.message.answer(brief + "\n<b>–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:</b>\n" + teams_text, parse_mode=ParseMode.HTML)
    await cq.message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b> (2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=cancel_kb(), parse_mode=ParseMode.HTML
        )
    await cq.answer()


@user_r.callback_query(F.data == "cancel")
async def cancel_any(
        cq: CallbackQuery,
        state: FSMContext
        ):
    await state.clear()
    await cq.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await cq.answer()


@user_r.message(RegisterFlow.entering_team_name)
async def team_name_step(
        m: Message,
        state: FSMContext
        ):
    name = (m.text or "").strip()
    if not (2 <= len(name) <= 40):
        await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        return
    data = await state.get_data()
    game_id = data["game_id"]
    async with session_scope() as s:
        d = await s.execute(select(Registration).where(Registration.game_id == game_id, Registration.team_name == name))
        if d.scalar_one_or_none():
            await m.answer("–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ. –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã:")
            return
    await state.update_data(team_name=name)
    await state.set_state(RegisterFlow.entering_players)
    await m.answer("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ? (1‚Äì12):")


@user_r.message(RegisterFlow.entering_players)
async def players_step(
        m: Message,
        state: FSMContext
        ):
    try:
        players = int((m.text or "").strip())
    except ValueError:
        await m.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    if not (1 <= players <= 12):
        await m.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return

    data = await state.get_data()
    game_id = data["game_id"]
    team_name = data["team_name"]
    uid = m.from_user.id
    chat_id = m.chat.id

    async with session_scope() as s:
        game = await s.get(Game, game_id)
        if not game or not game.is_active:
            await m.answer("–ò–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            await state.clear()
            return

        # –†–µ—à–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
        status = "confirmed"
        confirmed_teams = await count_confirmed_teams(s, game_id)
        confirmed_people = await sum_confirmed_people(s, game_id)

        teams_over = (game.teams_capacity is not None) and (confirmed_teams >= game.teams_capacity)
        people_over = (game.people_capacity is not None) and ((confirmed_people + players) > game.people_capacity)

        if teams_over or people_over:
            status = "waitlist"

        reg = Registration(
            user_id=uid,
            chat_id=chat_id,
            game_id=game_id,
            team_name=team_name,
            players=players,
            status=status,
        )
        s.add(reg)
        try:
            await s.flush()
        except IntegrityError:
            await m.answer("–ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º—è –∑–∞–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        # –ò—Ç–æ–≥–∏
        c_teams = await count_confirmed_teams(s, game_id)
        c_people = await sum_confirmed_people(s, game_id)
        q_wait = select(func.count(Registration.id)).where(
            Registration.game_id == game_id, Registration.status == "waitlist"
            )
        w_teams = (await s.execute(q_wait)).scalar_one()
        await state.clear()
        await m.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–ò–≥—Ä–∞: <b>{game.title}</b>\n"
            f"–ö–æ–≥–¥–∞: {fmt_dt(game.when)} | –ì–¥–µ: {game.location or '‚Äî'}\n"
            f"–ö–æ–º–∞–Ω–¥–∞: <b>{team_name}</b>\n"
            f"–ò–≥—Ä–æ–∫–æ–≤: <b>{players}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
            f"–ö–æ–º–∞–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {c_teams} (WL: {w_teams})\n"
            f"–õ—é–¥–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {c_people} / {game.people_capacity or '‚àû'}",
            parse_mode=ParseMode.HTML
        )


# --------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ----------

@user_r.callback_query(F.data.startswith("edit_name:"))
async def edit_name_start(
        cq: CallbackQuery,
        state: FSMContext
        ):
    reg_id = int(cq.data.split(":")[1])
    await state.set_state(EditNameFlow.entering_new_name)
    await state.update_data(reg_id=reg_id)
    await cq.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã (2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=cancel_kb())
    await cq.answer()


@user_r.message(EditNameFlow.entering_new_name)
async def edit_name_apply(
        m: Message,
        state: FSMContext
        ):
    name = (m.text or "").strip()
    if not (2 <= len(name) <= 40):
        await m.answer("–ò–º—è 2‚Äì40 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    data = await state.get_data()
    reg_id = data["reg_id"]
    uid = m.from_user.id
    async with session_scope() as s:
        reg = await s.get(Registration, reg_id)
        if not reg or reg.user_id != uid:
            await m.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return
        exists = await s.execute(
            select(Registration).where(
                Registration.game_id == reg.game_id,
                Registration.team_name == name,
                Registration.id != reg.id
            )
        )
        if exists.scalar_one_or_none():
            await m.answer("–≠—Ç–æ –∏–º—è –∑–∞–Ω—è—Ç–æ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ. –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ:")
            return
        reg.team_name = name
        try:
            await s.flush()
        except IntegrityError:
            await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∏–º—è.")
            return

    await state.clear()
    await m.answer("–ò–º—è –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")


@user_r.callback_query(F.data.startswith("edit_players:"))
async def edit_players_start(
        cq: CallbackQuery,
        state: FSMContext
        ):
    reg_id = int(cq.data.split(":")[1])
    await state.set_state(EditPlayersFlow.entering_new_players)
    await state.update_data(reg_id=reg_id)
    await cq.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤ (1‚Äì12):", reply_markup=cancel_kb())
    await cq.answer()


@user_r.message(EditPlayersFlow.entering_new_players)
async def edit_players_apply(
        m: Message,
        state: FSMContext
        ):
    try:
        players = int((m.text or "").strip())
    except ValueError:
        await m.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    if not (1 <= players <= 12):
        await m.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    data = await state.get_data()
    reg_id = data["reg_id"]
    uid = m.from_user.id
    async with session_scope() as s:
        reg = await s.get(Registration, reg_id)
        if not reg or reg.user_id != uid:
            await m.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return

        # –û–±–Ω–æ–≤–∏–º —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤
        reg.players = players

        # –ü–µ—Ä–µ–æ—Ü–µ–Ω–∏–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤
        game = await s.get(Game, reg.game_id)
        confirmed_teams = await count_confirmed_teams(
            s, reg.game_id
            )  # —Å–∞–º —Ä–µ–≥ —É—á—Ç—ë–Ω —Å—Ä–µ–¥–∏ confirmed (–µ—Å–ª–∏ –æ–Ω confirmed)
        confirmed_people_excl = await sum_confirmed_people(s, reg.game_id, exclude_reg_id=reg.id)

        teams_over = (game.teams_capacity is not None) and (confirmed_teams > game.teams_capacity)
        people_over = (game.people_capacity is not None) and ((confirmed_people_excl + players) > game.people_capacity)

        reg.status = "waitlist" if (teams_over or people_over) else "confirmed"
        await s.flush()
    await state.clear()
    await m.answer("–ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")


@user_r.callback_query(F.data.startswith("delete_reg:"))
async def delete_registration(
        cq: CallbackQuery
        ):
    reg_id = int(cq.data.split(":")[1])
    uid = cq.from_user.id
    async with session_scope() as s:
        reg = await s.get(Registration, reg_id)
        if not reg or reg.user_id != uid:
            await cq.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        await s.delete(reg)
    await cq.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.")
    await cq.answer("–£–¥–∞–ª–µ–Ω–æ")


# ----------------------------
# –†–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# ----------------------------

admin_r = Router()


@admin_r.message(Command("admin"))
async def admin_home(
        m: Message
        ):
    if not is_admin(m.from_user.id):
        return
    await m.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_main_kb())


@admin_r.callback_query(F.data == "admin:back")
async def admin_back(
        cq: CallbackQuery
        ):
    if not is_admin(cq.from_user.id):
        return
    await cq.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_main_kb())
    await cq.answer()


@admin_r.callback_query(F.data == "admin:list_games")
async def admin_list_games(
        cq: CallbackQuery
        ):
    if not is_admin(cq.from_user.id):
        return
    async with session_scope() as s:
        res = await s.execute(select(Game).order_by(Game.id.desc()))
        games = list(res.scalars())
    items = [(g.id, f"{g.title} ({fmt_dt(g.when)})" if g.when else g.title, g.is_active) for g in games]
    text = "–°–ø–∏—Å–æ–∫ –∏–≥—Ä (–Ω–∞–∂–º–∏, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å)"
    await cq.message.edit_text(text, reply_markup=admin_games_kb(items))
    await cq.answer()


@admin_r.callback_query(F.data.startswith("admin:game:"))
async def admin_game_open(
        cq: CallbackQuery
        ):
    if not is_admin(cq.from_user.id):
        return
    gid = int(cq.data.split(":")[2])
    async with session_scope() as s:
        g = await s.get(Game, gid)
        if not g:
            await cq.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        c_teams = await count_confirmed_teams(s, gid)
        c_people = await sum_confirmed_people(s, gid)
        q_wait = select(func.count(Registration.id)).where(
            Registration.game_id == gid, Registration.status == "waitlist"
            )
        w_teams = (await s.execute(q_wait)).scalar_one()
        text = game_brief(g, c_teams, c_people, w_teams)
        active = g.is_active
    await cq.message.edit_text(text, reply_markup=admin_game_actions_kb(gid, active), parse_mode=ParseMode.HTML)
    await cq.answer()


@admin_r.callback_query(F.data.startswith("admin:toggle:"))
async def admin_toggle_game(
        cq: CallbackQuery
        ):
    if not is_admin(cq.from_user.id):
        return
    gid = int(cq.data.split(":")[2])
    async with session_scope() as s:
        g = await s.get(Game, gid)
        if not g:
            await cq.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True);
            return
        g.is_active = not g.is_active
        await s.flush()
        c_teams = await count_confirmed_teams(s, gid)
        c_people = await sum_confirmed_people(s, gid)
        q_wait = select(func.count(Registration.id)).where(
            Registration.game_id == gid, Registration.status == "waitlist"
            )
        w_teams = (await s.execute(q_wait)).scalar_one()
        text = game_brief(g, c_teams, c_people, w_teams)
        active = g.is_active
    await cq.message.edit_text(text, reply_markup=admin_game_actions_kb(gid, active), parse_mode=ParseMode.HTML)
    await cq.answer("–ì–æ—Ç–æ–≤–æ")


@admin_r.callback_query(F.data.startswith("admin:teams:"))
async def admin_show_teams(
        cq: CallbackQuery
        ):
    if not is_admin(cq.from_user.id):
        return
    gid = int(cq.data.split(":")[2])
    async with session_scope() as s:
        res = await s.execute(
            select(Registration).where(Registration.game_id == gid).order_by(
                Registration.status.asc(), Registration.created_at.asc()
                )
        )
        regs = list(res.scalars())
        g = await s.get(Game, gid)
    if not g:
        await cq.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True);
        return
    if not regs:
        await cq.message.answer("–ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ —ç—Ç—É –∏–≥—Ä—É.")
        await cq.answer();
        return
    lines = [f"<b>{g.title}</b> ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"]
    for i, r in enumerate(regs, start=1):
        mark = "‚úÖ" if r.status == "confirmed" else "‚åõ"
        lines.append(f"{i}. {r.team_name} ‚Äî {r.players} —á–µ–ª. {mark}")
    await cq.message.answer("\n".join(lines), parse_mode=ParseMode.HTML)
    await cq.answer()


@admin_r.callback_query(F.data.startswith("admin:export:"))
async def admin_export_csv(
        cq: CallbackQuery
        ):
    if not is_admin(cq.from_user.id):
        return
    import pandas as pd
    gid = int(cq.data.split(":")[2])
    async with session_scope() as s:
        res = await s.execute(
            select(Registration).where(Registration.game_id == gid).order_by(Registration.created_at.asc())
        )
        regs = list(res.scalars())
        g = await s.get(Game, gid)
    if not g:
        await cq.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True);
        return
    if not regs:
        await cq.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True);
        return
    df = pd.DataFrame(
        [{
            "team_name": r.team_name,
            "players": r.players,
            "status": r.status,
            "created_at": r.created_at,
            "updated_at": r.updated_at,
            "user_id": r.user_id,
            "chat_id": r.chat_id
        } for r in regs]
    )
    filename = f"export_game_{gid}.csv"
    df.to_csv(filename, index=False)
    await cq.message.answer_document(document=FSInputFile(filename), caption=f"–≠–∫—Å–ø–æ—Ä—Ç –ø–æ –∏–≥—Ä–µ: {g.title}")
    await cq.answer("–≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤")


@admin_r.callback_query(F.data.startswith("admin:delete:"))
async def admin_delete_game(
        cq: CallbackQuery
        ):
    if not is_admin(cq.from_user.id):
        return
    gid = int(cq.data.split(":")[2])
    async with session_scope() as s:
        g = await s.get(Game, gid)
        if not g:
            await cq.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True);
            return
        await s.delete(g)
    await cq.message.answer("–ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–º–µ—Å—Ç–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏.")
    await cq.answer("–ì–æ—Ç–æ–≤–æ")


# ---- –ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã ----

@admin_r.callback_query(F.data == "admin:add_game")
async def add_game_start(
        cq: CallbackQuery,
        state: FSMContext
        ):
    if not is_admin(cq.from_user.id):
        return
    await state.set_state(AddGameFlow.entering_title)
    await cq.message.answer("–í–≤–µ–¥–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∏–≥—Ä—ã:", parse_mode=ParseMode.HTML, reply_markup=cancel_kb())
    await cq.answer()


@admin_r.message(AddGameFlow.entering_title)
async def add_game_title(
        m: Message,
        state: FSMContext
        ):
    title = (m.text or "").strip()
    if not (2 <= len(title) <= 200):
        await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ 2‚Äì200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(title=title)
    await state.set_state(AddGameFlow.entering_when)
    await m.answer("–ö–æ–≥–¥–∞? –í–≤–µ–¥–∏ –¥–∞—Ç—É/–≤—Ä–µ–º—è (–Ω–∞–ø—Ä. 2025-10-01 19:00) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´skip¬ª:")


@admin_r.message(AddGameFlow.entering_when)
async def add_game_when(
        m: Message,
        state: FSMContext
        ):
    dt = parse_datetime_maybe(m.text or "")
    await state.update_data(when=dt.isoformat() if dt else None)
    await state.set_state(AddGameFlow.entering_location)
    await m.answer("–ì–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–≥—Ä–∞? (–∏–ª–∏ ¬´skip¬ª)")


@admin_r.message(AddGameFlow.entering_location)
async def add_game_location(
        m: Message,
        state: FSMContext
        ):
    loc = (m.text or "").strip()
    if loc.lower() in {"skip", "–ø—Ä–æ–ø—É—Å–∫", "–Ω–µ—Ç", "–Ω–µ", ""}:
        loc = None
    await state.update_data(location=loc)
    await state.set_state(AddGameFlow.entering_teams_capacity)
    await m.answer("–õ–∏–º–∏—Ç –ø–æ <b>—á–∏—Å–ª—É –∫–æ–º–∞–Ω–¥</b>? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –∏–ª–∏ ¬´skip¬ª –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞:", parse_mode=ParseMode.HTML)


@admin_r.message(AddGameFlow.entering_teams_capacity)
async def add_game_teams_capacity(
        m: Message,
        state: FSMContext
        ):
    raw = (m.text or "").strip().lower()
    teams_cap: Optional[int] = None
    if raw not in {"skip", "–ø—Ä–æ–ø—É—Å–∫", "–Ω–µ—Ç", "–Ω–µ", ""}:
        try:
            teams_cap = int(raw)
            if teams_cap <= 0:
                await m.answer("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ ¬´skip¬ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
                return
        except ValueError:
            await m.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –∏–ª–∏ ¬´skip¬ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
            return
    await state.update_data(teams_capacity=teams_cap)
    await state.set_state(AddGameFlow.entering_people_capacity)
    await m.answer(
        "–õ–∏–º–∏—Ç –ø–æ <b>—á–∏—Å–ª—É –ª—é–¥–µ–π</b> (—Å—É–º–º–∞ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º)? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –∏–ª–∏ ¬´skip¬ª:",
        parse_mode=ParseMode.HTML
        )


@admin_r.message(AddGameFlow.entering_people_capacity)
async def add_game_people_capacity(
        m: Message,
        state: FSMContext
        ):
    raw = (m.text or "").strip().lower()
    people_cap: Optional[int] = None
    if raw not in {"skip", "–ø—Ä–æ–ø—É—Å–∫", "–Ω–µ—Ç", "–Ω–µ", ""}:
        try:
            people_cap = int(raw)
            if people_cap <= 0:
                await m.answer("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ ¬´skip¬ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
                return
        except ValueError:
            await m.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –∏–ª–∏ ¬´skip¬ª. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
            return
    await state.update_data(people_capacity=people_cap)
    await state.set_state(AddGameFlow.confirming_active)
    await m.answer("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —Å–µ–π—á–∞—Å? (–¥–∞/–Ω–µ—Ç)")


@admin_r.message(AddGameFlow.confirming_active)
async def add_game_confirm(
        m: Message,
        state: FSMContext
        ):
    from datetime import datetime
    ans = (m.text or "").strip().lower()
    active = ans in {"–¥–∞", "yes", "y", "–¥", "–∞–≥–∞", "–≤–∫–ª—é—á–∏—Ç—å"}
    data = await state.get_data()
    when_iso = data.get("when")
    dt = datetime.fromisoformat(when_iso) if when_iso else None
    async with session_scope() as s:
        g = Game(
            title=data["title"],
            when=dt,
            location=data.get("location"),
            teams_capacity=data.get("teams_capacity"),
            people_capacity=data.get("people_capacity"),
            is_active=active
        )
        s.add(g)
        await s.flush()

        c_teams = await count_confirmed_teams(s, g.id)
        c_people = await sum_confirmed_people(s, g.id)
        q_wait = select(func.count(Registration.id)).where(
            Registration.game_id == g.id, Registration.status == "waitlist"
            )
        w_teams = (await s.execute(q_wait)).scalar_one()

        await m.answer("–ò–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n" + game_brief(g, c_teams, c_people, w_teams), parse_mode=ParseMode.HTML)
    await state.clear()


# ----------------------------
# /help
# ----------------------------

@user_r.message(Command("help"))
async def help_cmd(
        m: Message
        ):
    text = (
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ /start ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n"
        "‚Ä¢ /whoami ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π user_id\n"
        "‚Ä¢ –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è/–∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞ –∏–≥—Ä–µ)\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∞–º: /admin ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏\n"
    )
    await m.answer(text)


# ----------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ----------------------------

async def main():
    await init_db()
    dp = Dispatcher(storage=MemoryStorage())

    dp.include_router(user_r)
    dp.include_router(admin_r)

    bot = Bot(
        token=settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    print("Bot is running...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Stopped.")
